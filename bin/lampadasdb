#!/bin/sh

SCRIPT_NAME=lampadasdb

usage()
{
	echo "\
Usage: $SCRIPT_NAME { OPTION } ACTION

Where ACTION is one of:

   create   Create new data tables.
   insert   Insert default values (work on insert.m4)
   update   Update default values (work on update.m4)
   drop     Drop all tables.
   delete   Delete all data.
   load     Load data from files in \$LAMPADAS_SPOOL.
   save     Copy data to files in \$LAMPADAS_SPOOL.

Where OPTION can choosen from:

   -h | --help        Write this message and exit.
   -data <dir>        Override value of LAMPADAS_DATA.
   -db <database>     Override value of LAMPADAS_DB.
   -spool <dir>       Override value of LAMPADAS_SPOOL.
   -sql <dir>         Override value of LAMPADAS_SQL.
   -lang <lang>       Insert and update work only on <lang>.m4,
                      not all found languages.
   -m4debug <flags>   Pass <flags> as value of option -d to m4.

The environment variables prefixed with 'LAMPADAS_' are typically set
within setenv.sh. Read comments in that file for a description.
"
}

check_var()
{
  [ -n "$1" ] && return  
  echo "Environment variable $2 is not set."
  echo "Read the comments in file 'setenv.sh' how to fix that."
  [ -n "$3" ] && echo "You can also use option -$3."
  exit -1
}

#---------------------------------------------

find_sql()
{
  local name=${1:-create}
  find "$LAMPADAS_SQL" -type f -name "$@" -maxdepth 2 -mindepth 2
}

find_table()
{
  # first -e removes trailing file name, e.g. "/create.sql"
  # second -e removes all leading directories
  find_sql "$@" | sed -e "s#/$1\$##" -e "s#.*/##"
}

#---------------------------------------------

need_rebuild()
{
  # return ok if target file does not exist
  [ -e "$1" ] || return 0

  # return ok if at least one .sql file is newer than target file
  # grep will return error if no file is found at all
  # the pattern should match any input
  find_sql '*.sql' -newer "$1" | grep -q . && return 0

  # return error. we don't need to rebuild makefile
  return 1
}

build_makefile()
{
  pattern_suffix='[[:space:]]*\([_[:alnum:]]*\).*'
  tables=$( find_table create.sql )

  echo Rebuilding ${TABLE_ORDER##*/}
  (
    echo "# Generated by $SCRIPT_NAME, do not edit"
    date "+# %c"
    echo ""

    # one rule to echo the names of all tables
    # the first expression of sed inserts a tab-stop (not spaces)
    echo "all: \\"
    echo "$tables" | sed -e 's/^/        _/' -e 's/$/ \\/'
    echo ""

    # one rule for each table that does echo its name
    echo "$tables" | sed -e 's/\([^[:space:]]*\)/_\1: ; @echo "\1"/'
    echo ""

    find_sql '*.sql' | while read file; do
      dir=${file%/*}
      table=${dir##*/}
      suffix="[[:space:]]*\([_[:alnum:]]*\).*/_$table: _\1/p"
      sed -n \
	  -e "s/.*\<[Rr][Ee][Ff][Ee][Rr][Ee][Nn][Cc][Ee][Ss]$suffix" \
	  -e "s/.*\<[Ff][Rr][Oo][Mm]$suffix" \
	  < $file
    done
  ) > $TABLE_ORDER
}

#---------------------------------------------

create()
{
  echo "-- create.sql"
  make -f $TABLE_ORDER \
  | sed "s#\(.*\)#$LAMPADAS_SQL/\1/create.sql#" \
  | xargs -r cat

  for name in views.sql indexes.sql permissions.sql; do
    echo "-- ${name}"
    find_sql "${name}" | xargs -r cat
  done
}

drop()
{
  find_table view.sql | sed -e 's#\(.*\)#DROP VIEW \1;#'

  make -f $TABLE_ORDER \
  | tac \
  | sed 's#\(.*\)#DROP TABLE \1;#'
}

delete()
{
  make -f $TABLE_ORDER \
  | tac \
  | sed 's#\(.*\)#DELETE FROM \1;#'
}

load()
{
  make -f $TABLE_ORDER \
  | sed -e "s#\(.*\)#copy \1 from '$LAMPADAS_SPOOL/\1';#"
}

save()
{
  make -f $TABLE_ORDER \
  | sed -e "s#\(.*\)#copy \1 to '$LAMPADAS_SPOOL/\1';#"
}

m4call()
{
  local lang=$1
  shift
  m4 $M4DEBUG -P -DI18N_lang_code=${lang} $LAMPADAS_SQL/common.m4 "$@"
}

m4script()
{
  echo "-- m4script $@"
  echo ""
  make -f $TABLE_ORDER \
  | while read table
  do
    m4cmd="$LAMPADAS_SQL/$table/$1.m4"
    tabledir="$LAMPADAS_DATA/$table"

    test -e "$m4cmd" -a -d "$tabledir" || continue
    find $tabledir -type f -name "$SQLLANG.m4" \
    | while read file
    do
      lang=${file%.m4}
      lang=${lang##*/}

      echo "-- $table/$lang -- $table/$1.m4 --"
      filter="$LAMPADAS_SQL/$lang.input"
      if [ -x "$filter" ]; then
	echo "-- $filter --"
	${filter} < ${file} | m4call ${lang} ${m4cmd} -
      else
        m4call ${lang} ${m4cmd} ${file}
      fi
      echo ""
    done
  done
}

#---------------------------------------------
# main()


SQLLANG="[A-Z][A-Z]"
while true; do
  case "$1" in
      "" | -h | --help )
	      usage
	      exit 1
	      ;;
      "-data" ) shift; LAMPADAS_DATA="$1"; shift ;;
      "-db" ) shift; LAMPADAS_DB="$1"; shift ;;
      "-lang" ) shift; SQLLANG="$1"; shift ;;
      "-spool" ) shift; LAMPADAS_SPOOL="$1"; shift ;;
      "-sql" ) shift; LAMPADAS_SQL="$1"; shift ;;
      "-m4debug" ) shift; M4DEBUG="-d$1"; shift ;;
      "create" | "drop" | "delete" | "load" | "save" )
              COMMAND=$1
              break
	      ;;
      "insert" | "update" )
              COMMAND=m4script
              break
	      ;;
      *)      echo "Invalid command: $1"
	      exit 1
	      ;;
  esac
done

check_var "$LAMPADAS_DATA" "LAMPADAS_DATA" "db"
check_var "$LAMPADAS_DB" "LAMPADAS_DB" "db"
check_var "$LAMPADAS_SPOOL" "LAMPADAS_SPOOL" "spool"
check_var "$LAMPADAS_SQL" "LAMPADAS_SQL" "sql"

TABLE_ORDER="$LAMPADAS_SPOOL/table_order.mak"
need_rebuild "$TABLE_ORDER" && build_makefile

sql="$LAMPADAS_SPOOL/$1.sql"
if need_rebuild "$sql"; then
  echo "Writing $sql"
  (
    echo "-- Created by $SCRIPT_NAME, do not edit"
    date "+-- %c"
    echo
    $COMMAND "$@" 
  ) > $sql || exit -1
fi
echo "Executing $sql" \
&& psql $LAMPADAS_DB -qf "$sql"
