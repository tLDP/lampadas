#!/usr/bin/python
# 
# This file is part of the Lampadas Documentation System.
# 
# Copyright (c) 2000, 2001, 2002 David Merrill <david@lupercalia.net>.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
"""
Lampadas Makefile Module

This module writes out a Makefile for every document in the cache.
"""

# Modules ##################################################################

from Globals import *
from DataLayer import lampadas
from Config import config
from Lintadas import lintadas
from Log import log



# Constants

XSLTPROC_PARAMS = ''


# Globals

class Makefile:

    def write_all(self):
        log(3, 'Writing Makefile for all documents')
        for dockey in lampadas.docs.keys():
            self.write(dockey)
        self.write_main_makefile()

    def write(self, doc_id):
        log(3, 'Writing Makefile for document ' + str(doc_id))
        doc = lampadas.docs[doc_id]
        
        # Determine where files live
        cachedir   = config.cache_dir + str(doc.id) + '/'
        self.write_makefile(doc, cachedir)
        
        log(3, 'Writing Makefile for document ' + str(doc_id) + ' complete.')
        

    def write_makefile(self, doc, dir):
        """
        Writes a Makefile to convert the source files into DocBook XML.
        """

        if doc.errors.count() > 0 or (doc.pub_status_code<>'A' and doc.pub_status_code<>'N'):
            return

        for file in doc.files.keys():
            file = doc.files[file]
            if file.top==1 and file.errors.count()==0:
                
                log(3, 'Found top file: ' + file.filename)
                dbsgmlfile = file.basename + '.db.sgml'
                xmlfile = file.basename + '.xml'
                tidyxmlfile = file.basename + '.tidy.xml'
                htmlfile = file.basename + '.html'
                indexfile = 'index.html'
                txtfile = file.basename + '.txt'
                omffile = file.basename + '.omf'

                Makefile = WOStringIO('# File generated by Makefile.py\n' \
                                      '# Do not hand edit.\n\n' \
                                      'all:\tbuild\n\n' \
                                      'rebuild:\tclean build\n\n' \
                                      'build:\tdbsgml xml tidyxml html index text omf\n\n' \
                                      'clean:\n')
                if doc.format_code<>'text':
                    Makefile.write('\trm -f %s\n' % txtfile)
                if doc.format_code<>'html':
                    Makefile.write('\trm -f *.html\n')
                if doc.format_code<>'xml':
                    Makefile.write('\trm -f *.xml\n')
                Makefile.write('\trm -f %s\n' % dbsgmlfile)
                Makefile.write('\trm -f %s\n' % tidyxmlfile)
                Makefile.write('\trm -f %s\n' % omffile)
                Makefile.write('\trm -f expanded.sgml\n')
                Makefile.write('\trm -f *.log\n' \
                               '\n')

                # WikiText
                if file.format_code=='wikitext':
                    Makefile.write('dbsgml:\t%s\n\n' \
                                   '%s:\t%s\n' \
                                   '\twt2db -n -s %s -o %s 2>>wt2db.log\n\n'
                                   % (file.file_only,
                                      dbsgmlfile, file.file_only,
                                      file.file_only, dbsgmlfile))

                    Makefile.write('xml:\t%s\n\n' \
                                   '%s:\t%s\n' \
                                   '\txmllint --sgml %s > %s 2>>xmllint.log\n\n'
                                   % (xmlfile,
                                      xmlfile, dbsgmlfile,
                                      dbsgmlfile, xmlfile))

                # Text
                if file.format_code=='text':
                    Makefile.write('dbsgml:\t%s\n\n'
                                   '%s:\t%s\n' \
                                   '\twt2db -n -s %s -o %s 2>>wt2db.log\n\n'
                                   % (dbsgmlfile,
                                      dbsgmlfile, file.file_only,
                                      file.file_only, dbsgmlfile))

                    Makefile.write('xml:\t%s\n\n'
                                   '%s:\t%s\n' \
                                   '\txmllint --sgml %s > %s 2>>xmllint.log\n\n'
                                   % (xmlfile,
                                      xmlfile, dbsgmlfile,
                                      dbsgmlfile, xmlfile))

                # Texinfo
                if file.format_code=='texinfo':
                    Makefile = Makefile + 'BUILD_XML = texi2db -f ' + file.file_only + ' -o ' + xmlfile + " 2>>texi2db.log\n"
                    Makefile.write('dbsgml:\t%s\n\n'
                                   '%s:\t%s\n' \
                                   '\ttexi2db -f %s -o %s 2>>texi2db.log\n\n'
                                   % (dbsgmlfile,
                                      dbsgmlfile, file.file_only,
                                      file.file_only, dbsgmlfile))

                    Makefile.write('xml:\t%s\n\n' \
                                   '%s:\t%s\n' \
                                   '\txmllint --sgml %s > %s 2>>xmllint.log\n\n'
                                   % (xmlfile,
                                      xmlfile, dbsgmlfile,
                                      dbsgmlfile, xmlfile))

                # LinuxDoc SGML
                if file.format_code=='sgml' and doc.dtd_code=='LinuxDoc':
                    Makefile.write('dbsgml:\t%s\n\n' \
                                   '%s:\t%s\n' \
                                   '\tsgmlnorm -d /usr/local/share/ld2db/docbook.dcl %s > expanded.sgml 2>>sgmlnorm.log\n' \
                                   '\tjade -t sgml -c /usr/local/share/ld2db/catalog -d /usr/local/share/ld2db/ld2db.dsl\\#db expanded.sgml > %s 2>>jade.log\n\n'
                                   % (dbsgmlfile,
                                      dbsgmlfile, file.file_only,
                                      file.file_only, dbsgmlfile))

                    Makefile.write('xml:\t%s\n\n' \
                                   '%s:\t%s\n' \
                                   '\txmllint --sgml %s > %s 2>>xmllint.log\n\n'
                                   % (xmlfile,
                                      xmlfile, dbsgmlfile,
                                      dbsgmlfile, xmlfile))
                    
                # DocBook SGML
                if file.format_code=='sgml' and doc.dtd_code=='DocBook':
                    Makefile.write('dbsgml:\n\n' \
                                   'xml:\t%s\n\n' \
                                   '%s:\t%s\n' \
                                   '\txmllint --sgml %s > %s 2>>xmllint.log\n\n\n'
                                   % (xmlfile,
                                      xmlfile, file.file_only,
                                      file.file_only, xmlfile))

                # DocBook XML
                if file.format_code=='xml' and doc.dtd_code=='DocBook':
                    Makefile.write('dbsgml:\n\n' \
                                   'xml:\n\n')

                # Everybody gets xml tidied before processing further
                Makefile.write('tidyxml:\t%s\n\n' \
                               '%s:\t%s\n' \
                               '\ttidy -config /etc/lampadas/tidyrc -quiet -f tidy.log %s > %s\n\n'
                               % (tidyxmlfile,
                                  tidyxmlfile, xmlfile, 
                                  xmlfile, tidyxmlfile))
                Makefile.write('html:\t%s\n\n' \
                               '%s:\t%s\n' \
                               '\txsltproc --param quiet 1 --maxdepth 100 %s %s %s > %s 2>>xsltproc.log\n\n'
                               % (htmlfile, 
                                  htmlfile, tidyxmlfile,
                                  XSLTPROC_PARAMS, config.xslt_html, tidyxmlfile, htmlfile))
                Makefile.write('index:\t%s\n\n' \
                               '%s:\t%s\n' \
                               '\txsltproc --param quiet 1 --maxdepth 100 %s %s %s > %s 2>>xsltproc.log\n\n'
                               % (indexfile,
                                  indexfile, tidyxmlfile,
                                  XSLTPROC_PARAMS, config.xslt_chunk, tidyxmlfile, htmlfile))
                Makefile.write('text:\t%s\n\n' \
                               '%s:\t%s\n' \
                               '\tlynx --dump --nolist %s > %s 2>>lynx.log\n\n'
                               % (txtfile,
                                  txtfile, htmlfile,
                                  htmlfile, txtfile))
                Makefile.write('omf:\t%s\n\n' \
                               '%s:\t%s\n' \
                               '\tdb2omf %s -o %s 2>>db2omf.log\n\n'
                               % (omffile,
                                  omffile, tidyxmlfile,
                                  tidyxmlfile, omffile))


                fh = open(dir + 'Makefile', 'w')
                fh.write(Makefile.get_value())
                fh.close

    def write_main_makefile(self):
        rebuildmake = ''
        buildmake = ''
        cleanmake = ''
        dbsgmlmake = ''
        xmlmake = ''
        tidyxmlmake = ''
        htmlmake = ''
        indexmake = ''
        textmake = ''
        omfmake = ''
        makeneeded = 0
        for docid in lampadas.docs.keys():
            doc = lampadas.docs[docid]
            if doc.errors.count()==0 and doc.files.error_count()==0:
                for file in doc.files.keys():
                    file = doc.files[file]
                    if file.top==1:
    #                    if (file.format_code=='sgml' and doc.dtd_code=='DocBook') or (file.format_code=='sgml' and doc.dtd_code=='LinuxDoc') or file.format_code=='xml' or file.format_code=='wikitext' or file.format_code=='text':
                        makeneeded = 1
                        rebuildmake = rebuildmake + "\tcd " + str(docid) + "; $(MAKE) rebuild 2>>make.log\n"
                        buildmake = buildmake + "\tcd " + str(docid) + "; $(MAKE) all 2>>make.log\n"
                        cleanmake = cleanmake + "\tcd " + str(docid) + "; $(MAKE) clean 2>>make.log\n"
                        dbsgmlmake = dbsgmlmake + '\tcd ' + str(docid) + '; $(MAKE) xml 2>>make.log\n'
                        xmlmake = xmlmake + "\tcd " + str(docid) + "; $(MAKE) xml 2>>make.log\n"
                        tidyxmlmake = tidyxmlmake + "\tcd " + str(docid) + "; $(MAKE) tidyxml 2>>make.log\n"
                        htmlmake = htmlmake + "\tcd " + str(docid) + "; $(MAKE) html 2>>make.log\n"
                        indexmake = indexmake + "\tcd " + str(docid) + "; $(MAKE) index 2>>make.log\n"
                        textmake = textmake + "\tcd " + str(docid) + "; $(MAKE) txt 2>>make.log\n"
                        omfmake = omfmake + "\tcd " + str(docid) + "; $(MAKE) omf 2>>db2omf.log\n"

        if makeneeded:
            Makefile = "all:\tbuild\n\n"
            Makefile = Makefile + "build:\n" + buildmake + "\n\n"
            Makefile = Makefile + "rebuild:\n" + rebuildmake + "\n\n"
            Makefile = Makefile + "clean:\n" + cleanmake + "\n\n"
            Makefile = Makefile + "dbsgml:\n" + dbsgmlmake + "\n\n"
            Makefile = Makefile + "xml:\n" + xmlmake + "\n\n"
            Makefile = Makefile + "tidyxml:\n" + tidyxmlmake + "\n\n"
            Makefile = Makefile + "html:\n" + htmlmake + "\n\n"
            Makefile = Makefile + "index:\n" + indexmake + "\n\n"
            Makefile = Makefile + "text:\n" + textmake + "\n\n"
            Makefile = Makefile + "omf:\n" + omfmake + "\n\n"

            fh = open(config.cache_dir + 'Makefile', 'w')
            fh.write(Makefile)
            fh.close


makefile = Makefile()


if __name__=="__main__":
    print "Running Makefile on all documents..."
    makefile.write_all()

