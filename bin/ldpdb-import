#! /usr/bin/python
# 
# This file is part of the Lampadas Documentation System.
# 
# Copyright (c) 2000, 2001, 2002 David Merrill <david@lupercalia.net>.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
from Globals import *
from Database import get_database
from BaseClasses import *
import sys
import os
import string

DEBUG = 0

DOCUMENT_LANGUAGES = {68:   'FI',   # Finnish HOWTO
                      87:   'EL',   # Hellenic HOWTO
                      483:  'LV',   # Latvian HOWTO
                      124:  'FR',   # Francophone HOWTO
                      197:  'PT',   # Purtuguese HOWTO
                      151:  'EO',   # Esperanto HOWTO
                      283:  'SH',   # Serbian HOWTO
                      479:  'SK',   # Slovak HOWTO
                      290:  'SL',   # Slovenian HOWTO
                      297:  'ES',   # Spanish HOWTO
                      384:  'TK'}   # Turkish HOWTO

class Name:

    def __init__(self, fullname):
        name = fullname
        name = name.replace('Dr\.', '')
        name = name.replace(', II', '')
        name = name.replace(', III', '')
        name = string.split(name)
        if len(name)==1:
            self.first_name  = name[0]
            self.middle_name = ''
            self.surname     = ''
        elif len(name)==2:
            self.first_name  = name[0]
            self.middle_name = ''
            self.surname     = name[1]
        elif len(name)==3:
            self.first_name  = name[0]
            self.middle_name = name[1]
            self.surname     = name[2]
        elif len(name)==4:
            self.first_name  = name[0]
            mi1              = name[1]
            mi2              = name[2]
            self.middle_name = mi1 + ' ' + mi2
            self.surname     = name[3]
            
            if mi2.upper() in ('DE','DER','DOS','VAN','DA'):
                self.surname = mi2 + self.surname
                self.middle_name = mi1
        else:
            print "ERROR: found a five word name, cannot parse it: " + string.join(name)
            sys.exit()
        
        if self.middle_name.upper() in ('VAN','VAN DER','VAN DEN','DE','DE LA',
                                        'DER','DOS','DA'):
            self.surname = self.middle_name + ' ' + self.surname
            self.middle_name = ''
        
    
class OldMaintainers(LampadasCollection):
   
    def __init__(self):
        self.data = {}
        sql = 'SELECT maintainer_id, maintainer_name, email FROM maintainer'
        cursor = ldp_db.select(sql)
        while (1):
            row = cursor.fetchone()
            if row==None: break
            maintainer = OldMaintainer()
            maintainer.load_row(row)
            self[maintainer.id] = maintainer


class OldMaintainer:

    def load_row(self, row):
        self.id    = row[0]
        self.name  = trim(row[1])
        self.email = trim(row[2])
        name = Name(self.name)
        self.first_name  = name.first_name
        self.middle_name = name.middle_name
        self.surname     = name.surname
        

class OldEditors(LampadasCollection):
    
    def __init__(self):
        self.data = {}
        sql = 'SELECT editor_id, editor_name, email, notes FROM editor'
        cursor = ldp_db.select(sql)
        while (1):
            row = cursor.fetchone()
            if row==None: break
            editor = OldEditor()
            editor.load_row(row)
            self[editor.id] = editor


class OldEditor:

    def load_row(self, row):
        self.id    = row[0]
        self.name  = trim(row[1])
        self.email = trim(row[2])
        self.notes = trim(row[3])

        name = Name(self.name)
        self.first_name  = name.first_name
        self.middle_name = name.middle_name
        self.surname     = name.surname


class OldUsers(LampadasCollection):
    
    def __init__(self):
        self.data = {}
        sql = 'SELECT username, first_name, surname, email, admin, '\
              '       maintainer_id, editor_id '\
              'FROM username'
        cursor = ldp_db.select(sql)
        while (1):
            row = cursor.fetchone()
            if row==None: break
            user = OldUser()
            user.load_row(row)
            self[user.username] = user

class OldUser:

    def load_row(self, row):
        self.username      = string.lower(trim(row[0]))
        self.first_name    = trim(row[1])
        self.surname       = trim(row[2])
        self.email         = trim(row[3])
        self.admin         = tf2bool(row[4])
        self.maintainer_id = row[5]
        self.editor_id     = row[6]


class NewUsers(LampadasCollection):

    def save(self):
        keys = self.keys()
        for key in keys:
            user = self[key]
            user.save()

    def find_maintainer(self, maintainer_id):
        keys = self.keys()
        for key in keys:
            user = self[key]
            if user.maintainer_id==maintainer_id:
                return user
        

    def find_editor(self, editor_id):
        keys = self.keys()
        for key in keys:
            user = self[key]
            if user.editor_id==editor_id:
                return user

class NewUser:

    def __init__(self):
        self.username      = ''
        self.first_name    = ''
        self.middle_name = ''
        self.surname       = ''
        self.email         = ''
        self.admin         = 0
        self.notes         = ''
        self.password      = random_string(12)
        self.maintainer_id = 0
        self.editor_id     = 0

    def username_from_name(self):
        self.username = trim(self.first_name + trim(self.middle_name + self.surname))
        self.username = self.username.lower()
        self.username = self.username.replace('&','')
        self.username = self.username.replace('.','')
        self.username = self.username.replace('\'','')
        self.username = self.username.replace(' ','')
        
    def username_from_email(self):
        self.username = self.email
        
    def save(self):
        sql = 'INSERT INTO username(username, first_name, middle_name, surname, '
        sql += 'email, admin, notes, password) '
        sql += 'VALUES(' + wsq(self.username) + ', ' + wsq(self.first_name) + ', ' + wsq(self.middle_name) + ', ' + wsq(self.surname) + ', '
        sql += wsq(self.email) + ', ' + wsq(bool2tf(self.admin)) + ', ' + wsq(self.notes) + ', ' + wsq(self.password) + ')'
        lampadas_db.runsql(sql)
        lampadas_db.commit()


###################################################################3

def copy_users():
    # Copy users over
    for username in usernames:
        user = users[username]
        newuser = NewUser()
        newuser.username      = user.username
        newuser.first_name    = user.first_name
        newuser.surname       = user.surname
        newuser.email         = user.email
        newuser.admin         = user.admin
        newuser.maintainer_id = user.maintainer_id
        newuser.editor_id     = user.editor_id
        newusers[newuser.username]    = newuser

    # Merge maintainer data
    for maintainer_id in maintainer_ids:
        maintainer = maintainers[maintainer_id]
        newuser = newusers.find_maintainer(maintainer_id)
        if newuser:
            newuser.maintainer_id = maintainer_id
            if newuser.email=='':
                newuser.email = maintainer.email
        else:
            newuser = NewUser()
            newuser.first_name    = maintainer.first_name
            newuser.middle_name   = maintainer.middle_name
            newuser.surname       = maintainer.surname
            newuser.email         = maintainer.email
            newuser.maintainer_id = maintainer.id
            newuser.username_from_name()
            if newusers[newuser.username]:
                print 'NOTICE: maintainer username is taken: ' +newuser.username
                newuser.username_from_email()
                print '           using email changed it to: ' + newuser.username
                if newusers[newuser.username]:
                    print "ERROR: cannot generate unique username for: " + newuser.username + ', ' + newuser.name
                    sys.exit()
            newusers[newuser.username] = newuser
    
    # Merge editor data
    for editor_id in editor_ids:
        editor = editors[editor_id]
        newuser = newusers.find_editor(editor_id)
        if newuser:
            newuser.editor_id = editor_id
            newuser.notes = editor.notes
            if newuser.email=='':
                newuser.email = editor.email
        else:
            newuser = NewUser()
            newuser.first_name  = editor.first_name
            newuser.middle_name = editor.middle_name
            newuser.surname     = editor.surname
            newuser.email       = editor.email
            newuser.notes       = editor.notes
            newuser.editor_id   = editor.id
            newuser.username_from_name()
            if newusers[newuser.username]:
                print 'NOTICE: editor username is taken: ' +newuser.username
                newuser.username_from_email()
                print '       using email changed it to: ' + newuser.username
                if newusers[newuser.username]:
                    print "ERROR: cannot generate unique username for: " + newuser.username + ', ' + newuser.name
                    sys.exit()
            newusers[newuser.username] = newuser

    # Save the new data
    newusers.save()
    
    # Reset david's information -- just for my own convenience.
    sql = 'UPDATE username SET password=' + wsq('password') + ', stylesheet=' + wsq('ldp') + ' WHERE username=' + wsq('david')
    lampadas_db.runsql(sql)
    lampadas_db.commit()

def copy_documents():
    sql = 'SELECT doc_id, title, filename, class, format, dtd, dtd_version, version, last_update, url, isbn, pub_status, review_status, tickle_date, pub_date, ref_url, tech_review_status, maintained, license, abstract, rating FROM document'
    cursor = ldp_db.select(sql)
    while (1):
        row = cursor.fetchone()
        if row==None: break
        # adjust doc_id to lie above any existing documents
        doc_id              = row[0] + doc_id_offset
        title               = trim(row[1])
        filename            = trim(row[2])
        type                = trim(row[3])
        format              = trim(row[4])
        dtd                 = trim(row[5])
        dtd_version         = trim(row[6])
        version             = trim(row[7])
        last_update         = date2str(row[8])
        url                 = trim(row[9])
        isbn                = trim(row[10])
        pub_status          = trim(row[11])
        review_status       = trim(row[12])
        tickle_date         = date2str(row[13])
        pub_date            = date2str(row[14])
        ref_url             = trim(row[15])
        tech_review_status  = trim(row[16])
        maintained          = tf2bool(row[17])
        license             = trim(row[18])
        abstract            = trim(row[19])
        rating              = safeint(row[20])

        if DOCUMENT_LANGUAGES.has_key(doc_id):
            lang = DOCUMENT_LANGUAGES[doc_id]
        else:
            lang = 'EN'

        type = type.lower()
        if type=='guide':
            type = 'userguide'
        if type=='mini':
            type = 'howto'
        if type=='backgrounder':
            type = 'intro'
        if type=='quick':
            type = 'quickref'

        format = format.lower()
        if format=='wiki':
            format = 'wikitext'

        # Lampadas doesn't understand LDP-specific licensing
        # to this degree.
        license = license.lower()
        if license=='boilerplate':
            license = 'free'
        if license=='howtol' or license=='ldpcl' or license=='oldldpl':
            license = 'ldpl'
       
        # unknown status should just be NULL
        if pub_status=='?':
            pub_status = ''
        
        # offsite records do not get copies.
        # Record doc_id in ignore_docs so child data is ignored too.
        if pub_status=='O':
            ignore_docs.append(doc_id)
            continue
        
        # replaced pub_status is gone -- it wasn't really a pub
        # status. The status for these is deleted, with a separate
        # field to indicate what document replaced it.
        if pub_status=='R':
            pub_status = 'D'

        # Calculate a sk_seriesid:
        command = 'scrollkeeper-gen-seriesid'
        process = os.popen(command)
        sk_seriesid = process.read()
        process.close()

        sql = 'INSERT INTO document(doc_id, lang, title, type_code, format_code, dtd_code, dtd_version, version, last_update, '
        sql += 'isbn, pub_status, review_status, tickle_date, pub_date, tech_review_status, maintained, '
        sql += 'license_code, abstract, rating, sk_seriesid) '
        sql += 'VALUES(' + str(doc_id) + ', ' + wsq(lang) + ', ' + wsq(title) + ', ' + wsq(type) + ', ' + wsq(format) + ', ' + wsq(dtd) + ', ' + wsq(dtd_version) + ', ' + wsq(version) + ', ' + wsq(last_update) + ', '
        sql += wsq(isbn) + ',' + wsq(pub_status) + ', ' 
        sql += wsq(review_status) + ', ' + wsq(tickle_date) + ', ' 
        sql += wsq(pub_date) + ', '
        sql += wsq(tech_review_status) + ', ' + wsq(bool2tf(maintained)) + ', '
        sql += wsq(license) + ', ' + wsq(abstract) + ', ' + str(rating) + ', ' + wsq(sk_seriesid) + ')'
        lampadas_db.runsql(sql)
        lampadas_db.commit()

    # Set HOWTO-HOWTO as replaced by LDP Author Guide
    sql = 'UPDATE document SET replaced_by_id=121 WHERE doc_id=90'
    lampadas_db.runsql(sql)
    lampadas_db.commit()

    # Set Boca-HOWTO as replaced by Installing Boca Card Mini-HOWTO
    sql = 'UPDATE document SET replaced_by_id=103 WHERE doc_id=20'
    lampadas_db.runsql(sql)
    lampadas_db.commit()

    # Delete HOWTO-Index.
    sql = 'UPDATE document SET pub_status=' + wsq('D') + ' WHERE doc_id=122'
    lampadas_db.runsql(sql)
    lampadas_db.commit()
    

def copy_document_users():
    sql = 'SELECT doc_id, maintainer_id, role, active, email FROM document_maintainer'
    cursor = ldp_db.select(sql)
    while (1):
        row = cursor.fetchone()
        if row==None: break
        # adjust doc_id to lie above any existing documents
        doc_id        = row[0] + doc_id_offset
        
        # Ignore child data if parent was ignored.
        if doc_id in ignore_docs:
            continue

        maintainer_id = row[1]
        role          = trim(row[2])
        active        = tf2bool(row[3])
        email         = trim(row[4])

        role = role.lower()
        role = role.replace('-','')

        user = newusers.find_maintainer(maintainer_id)
        username = user.username

        sql = 'INSERT INTO document_user (doc_id, username, role_code, email, active) '
        sql += 'VALUES (' + str(doc_id) + ', ' + wsq(username) + ', ' + wsq(role) + ', ' 
        sql += wsq(email) + ', ' + wsq(bool2tf(active)) + ')'
        if DEBUG > 0:
            print sql
        lampadas_db.runsql(sql)
        lampadas_db.commit()

def copy_document_topics():
    sql = 'SELECT doc_id, topic_num, subtopic_num FROM document_topic'
    cursor = ldp_db.select(sql)
    while (1):
        row = cursor.fetchone()
        if row==None: break
        # adjust doc_id to lie above any existing documents
        doc_id        = row[0] + doc_id_offset

        # Ignore child data if parent was ignored.
        if doc_id in ignore_docs:
            continue
        
        topic_num     = row[1]
        subtopic_num  = row[2]

        #sql = 'SELECT topic.topic_num, subtopic.subtopic_num, subtopic_code'
        sql = 'SELECT subtopic_code'
        sql += ' FROM topic, subtopic'
        sql += ' WHERE topic.topic_code = subtopic.topic_code'
        sql += ' AND topic.topic_num=' + str(topic_num)
        sql += ' AND subtopic.subtopic_num=' + str(subtopic_num)
        cursor2 = lampadas_db.select(sql)
        row2 = cursor2.fetchone()
        if row2==None:
            print 'ERROR: could not locate the subtopic_code for topic_num: ' + str(topic_num) + ' subtopic_num: ' + str(subtopic_num)
            sys.exit()
        subtopic_code = trim(row2[0])

        sql = 'INSERT INTO document_topic(doc_id, subtopic_code) '
        sql += 'VALUES (' + str(doc_id) + ', ' + wsq(subtopic_code) + ')'
        lampadas_db.runsql(sql)
        lampadas_db.commit()


def copy_document_revs():
    sql = 'SELECT doc_id, rev_id, version, pub_date, initials, notes FROM document_rev'
    cursor = ldp_db.select(sql)
    while(1):   
        row = cursor.fetchone()
        if row==None: break
        # adjust doc_id to lie above any existing documents
        doc_id   = row[0] + doc_id_offset
        
        # Ignore child data if parent was ignored.
        if doc_id in ignore_docs:
            continue

        rev_id   = row[1]
        version  = trim(row[2])
        pub_date = date2str(row[3])
        initials = trim(row[4])
        notes    = trim(row[5])

        sql = 'INSERT INTO document_rev(rev_id, doc_id, version,'
        sql += ' pub_date, initials, notes)'
        sql += ' VALUES(' + str(rev_id) + ', ' + str(doc_id) + ', ' + wsq(version) + ', '
        sql += wsq(pub_date) + ', ' + wsq(initials) + ', ' + wsq(notes) + ')'
        lampadas_db.runsql(sql)
        lampadas_db.commit()

def copy_document_files():
    sql = 'SELECT doc_id, filename, dtd, format, class FROM document'
    cursor = ldp_db.select(sql)
    while(1):   
        row = cursor.fetchone()
        if row==None: break
        # adjust doc_id to lie above any existing documents
        doc_id   = row[0] + doc_id_offset

        # Ignore child data if parent was ignored.
        if doc_id in ignore_docs:
            continue
        
        filename = trim(row[1])

        # Skip any empty filenames.
        if filename=='':
            continue

        # Guess the CVS directory based on document's attributes
        dtd    = trim(row[2])
        format = trim(row[3])
        type   = trim(row[4])

        # Preface with the dtd or format
        if dtd=='DocBook':   filename = 'docbook/' + filename
        if dtd=='LinuxDoc':  filename = 'linuxdoc/' + filename
        if format=='WIKI':      filename = 'wikitext/' + filename

        # Preface with the type
        if type=='FAQ':      filename = 'faq/' + filename
        if type=='GUIDE':    filename = 'guide/' + filename
        if type=='HOWTO':    filename = 'howto/' + filename
        if type=='MINI':     filename = 'howto/' + filename
        if type=='QUICK':    filename = 'ref/' + filename
        if type=='TEMPLATE': filename = 'howto/' + filename
        
        create_source_file(filename)
            
        sql = 'INSERT INTO document_file(doc_id, filename, top)'
        sql += ' VALUES(' + str(doc_id) + ', ' + wsq(filename) + ', ' + wsq('t') + ')'
        if DEBUG > 0:
            print sql
        lampadas_db.runsql(sql)
        lampadas_db.commit()


def create_source_file(filename):
    # Create the file if it doesn't already exist
    sql = 'SELECT COUNT(*) FROM sourcefile WHERE filename=' + wsq(filename)
    cursor = lampadas_db.select(sql)
    row = cursor.fetchone()
    if row[0]==0:
        sql = 'INSERT INTO sourcefile(filename) VALUES (' + wsq(filename) + ')'
        lampadas_db.runsql(sql)
        lampadas_db.commit()


def copy_notes():
    note_id = lampadas_db.max_id('notes', 'note_id')
    sql = 'SELECT doc_id, date_entered, notes, username FROM notes'
    cursor = ldp_db.select(sql)
    while(1):   
        row = cursor.fetchone()
        if row==None: break
        # adjust doc_id to lie above any existing documents
        doc_id       = row[0] + doc_id_offset

        # Ignore child data if parent was ignored.
        if doc_id in ignore_docs:
            continue

        note_id = note_id + 1
        date_entered = time2str(row[1])
        notes        = trim(row[2])
        username     = trim(row[3])
        
        sql = 'INSERT INTO notes(note_id, doc_id, date_entered, '
        sql += ' notes, creator)'
        sql += ' VALUES(' + str(note_id) + ', ' + str(doc_id) + ', ' + wsq(date_entered) + ', '
        sql += wsq(notes) + ', ' + wsq(username) + ')'
        lampadas_db.runsql(sql)
        lampadas_db.commit()


def update_globals():
    sql = 'UPDATE string_i18n SET string=' + wsq('The LDP') + ' WHERE string_code=' + wsq('strprojectshort')
    lampadas_db.runsql(sql)
    lampadas_db.commit()
    
    sql = 'UPDATE string_i18n SET string=' + wsq('The Linux Documentation Project') + ' WHERE string_code=' + wsq('strproject')
    lampadas_db.runsql(sql)
    lampadas_db.commit()


def usage():
    print """Usage: ldp-import [FROM] [TO]

    FROM and TO are the names of two local databases.
    FROM is an LDPDB database, and TO is a Lampadas database.
    """
    sys.exit()


# Options passed on the command line
if len(sys.argv) <> 3:
    usage()
ldp_db_name      = sys.argv[1]
lampadas_db_name = sys.argv[2]

# Databas objects,
ldp_db = get_database('pgsql', ldp_db_name)
lampadas_db = get_database('pgsql', lampadas_db_name)

# Collection objects to store user data while merging.
maintainers = OldMaintainers()
maintainer_ids = maintainers.keys()
editors = OldEditors()
editor_ids = editors.keys()
users = OldUsers()
usernames = users.keys()
newusers = NewUsers()
newusernames = newusers.keys()

# Doc ids in the ldp database are all bumped by this much to avoid
# collissions with existing docs in the database. This lets us
# load the LDP data on top of any existing data.
doc_id_offset = lampadas_db.max_id('document', 'doc_id')

# Store docs which were not imported here. Docs with a pub_status of
# "O" (Offsite) are not imported. When loading dependent tables,
# check here to see whether to just ignore the record.
ignore_docs = [] 

# This will probably be deleted -- this script will then
# load LDP data right on top of any default data.
#lampadas_db.runsql('DELETE FROM notes')
#lampadas_db.runsql('DELETE FROM document_file')
#lampadas_db.runsql('DELETE FROM document_rev')
#lampadas_db.runsql('DELETE FROM document_topic')
#lampadas_db.runsql('DELETE FROM document_user')
#lampadas_db.runsql('DELETE FROM document')
#lampadas_db.runsql('DELETE FROM username')
#lampadas_db.commit()

# Load the data
print 'Loading LDPDB data...'
copy_users()
copy_documents()
copy_document_users()
copy_document_topics()
copy_document_revs()
copy_document_files()
copy_notes()
update_globals()
