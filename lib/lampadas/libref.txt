Lampadas library documentation reference
========================================

Lampadas version = 0.1.200205131

This reference documentation only covers class and methods that needs
to be accessed from the outside, not the internal mechanisms.

The unimplemented objects are marked by a '[U]' flag.


DataLayer module
----------------

DataLayer.Audience class
~~~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Audience.name (StringType)
DataLayer.Audience.level (IntType)
DataLayer.Audience.description (StringType)

Methods :

Exceptions :


DataLayer.Database class
~~~~~~~~~~~~~~~~~~~~~~~~
Data :

Methods :
Database DataLayer.get_database([StringType dbtype[, StringType dbname]])
	Connect to the database. To let people use different DBs, use specific class derived from Database.

None DataLayer.Database.add_document(Database self, Document document)
	[U] Add a new document.
	
None DataLayer.Database.add_note(Database self, Note note)
	[U] Add a new note.
	
None DataLayer.Database.add_revision(Database self, Revision revision)
	[U] Add a new revision.

None DataLayer.Database.add_topic(Database self, Topic topic)
	[U] Add a new topic.

StringType DataLayer.Database.get_config(Database self, StringType name)
	Return value of config parameter.

Document DataLayer.Database.get_document(Database self, IntType doc_id)
	Return document by doc_id entry.

IntType DataLayer.Database.get_document_count(Database self[, StringType type, ListType list])
	Return number of documents. If type and list specified, count only documents of the class (type='ByClass') or of
	the pub_status (type='ByPubStatus') specified in list.

ListType[Document] DataLayer.Database.get_documents_by_user(Database self, IntType user_id)
	Return list of documents for a given user_id.

ListType[DTD] DataLayer.Database.get_dtds(Database self)
	[U] Return list of dtds.

ListType[Format] DataLayer.Database.get_formats(Database self)
	[U] Return list of formats.

ListType[License] DataLayer.Database.get_licenses(Database self)
	[U] Return list of licenses.

ListType[Note] DataLayer.Database.get_notes_by_document(Database self, IntType doc_id)
	[U] Return a list of notes for a given doc_id.

ListType[Note] DataLayer.Database.get_notes_by_user(Database self, IntType user_id)
	[U] Return list of notes for a given user_id.

ListType[Revision] DataLayer.Database.get_revisions_by_document(Database self, IntType doc_id)
	[U] Return a list of revisions for a given doc_id.

ListType[Role] DataLayer.Database.get_roles(Database self)
	[U] Return list of roles.

Topic DataLayer.Database.get_topic(Database self, IntType topic_num)
	[U] Return the topic.

ListType[Topic] DataLayer.Database.get_topics(Database self[, IntType father_id])
	[U] Return list of topics, children of a given father. If the father is omitted, then root topics are given..

ListType[Topic] DataLayer.Database.get_topics_by_document(Database self, IntType doc_id)
	[U] Return a list of topics for a given doc_id.

User DataLayer.Database.get_user_by_id(Database self, IntType user_id)
	Return user by user_id entry.

User DataLayer.Database.get_user_by_name(Database self, StringType username)
	Return user by username entry.

User DataLayer.Database.get_user_by_sessionid(Database self, StringType session_id)
	Return a user that has corresponding session_id.

ListType[User] DataLayer.Database.get_users(Database self)
	Return the list of all users.

ListType[User] DataLayer.Database.get_users_by_document(Database self, IntType doc_id)
	Return list of users with their roles for a given doc_id.

Boolean DataLayer.Database.is_maintainer(Database self, IntType user_id)
	Return true if user is a maintainer or an admin.

None DataLayer.Database.remove_revision(Database self, IntType revision_id)
	[U] Remove a document revision.

None DataLayer.Database.update_document(Database self, Document document)
	[U] Update an existing document.

None DataLayer.Database.update_revision(Database self, Revision revision)
	[U] Update an existing revision.

None DataLayer.Database.update_topic(Database self, Topic topic)
	[U] Update an existing topic.


DataLayer.Document class
~~~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Document.doc_id (IntType) = unique doc_id
DataLayer.Document.title (StringType)
DataLayer.Document.filename (StringType)
DataLayer.Document.type (Type class instance)
DataLayer.Document.audience (Audience class instance)
DataLayer.Document.format (Format class instance)
DataLayer.Document.dtd (DTD class instance)
DataLayer.Document.version (StringType)
DataLayer.Document.last_update (DateTime)
DataLayer.Document.url (StringType)
DataLayer.Document.isbn (StringType)
DataLayer.Document.pub_status (PubStatus class instance)
DataLayer.Document.author_status (NoneType) [U]
DataLayer.Document.review_status (ReviewStatus class instance)
DataLayer.Document.tickle_date (DateTime)
DataLayer.Document.pub_date (DateTime)
DataLayer.Document.ref_url (StringType)
DataLayer.Document.tech_review_status (ReviewStatus class instance)
DataLayer.Document.maintained (Boolean)
DataLayer.Document.license (License class instance)
DataLayer.Document.abstract (StringType)
DataLayer.Document.wiki (Wiki class instance)
DataLayer.Document.rating (IntType)

Methods :

Exceptions :
DocumentNotFoundException


DataLayer.DTD class
~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.DTD.name (StringType)
DataLayer.DTD.version (StringType)

Methods :

Exceptions :


DataLayer.Format class
~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Format.name (StringType)
DataLayer.Format.long_name (StringType)

Methods :

Exceptions :


DataLayer.License class
~~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.License.name (StringType)
DataLayer.License.free (Boolean)

Methods :

Exceptions :


DataLayer.Note class
~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Note.date_entered (DateTime)
DataLayer.Note.text (StringType)
DataLayer.Note.user (User class instance)

Methods :

Exceptions :


DataLayer.PubStatus class
~~~~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.PubStatus.code (StringType)
DataLayer.PubStatus.name (StringType)
DataLayer.PubStatus.description (StringType)

Methods :

Exceptions :


DataLayer.ReviewStatus class
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.ReviewStatus.code (StringType)
DataLayer.ReviewStatus.name (StringType)

Methods :

Exceptions :


DataLayer.Revision class
~~~~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Revision.rev_id (IntType)
DataLayer.Revision.version (FloatType)
DataLayer.Revision.pub_date (DateTime)
DataLayer.Revision.initials (StringType)
DataLayer.Revision.notes (StringType)

Methods :

Exceptions :


DataLayer.Role class
~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Role.name (StringType)

Methods :

Exceptions :


DataLayer.Topic class
~~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Topic.num (IntType)
DataLayer.Topic.name (StringType)
DataLayer.Topic.description (StringType)
DataLayer.Topic.subtopic_num (IntType)
DataLayer.Topic.subtopic_name (StringType)

Methods :

Exceptions :


DataLayer.Type class
~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Type.name (StringType)
DataLayer.Type.long_name (StringType)

Methods :

Exceptions :


DataLayer.Wiki class
~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.Wiki.revision (IntType)
DataLayer.Wiki.date_entered (DateTime)
DataLayer.Wiki.wiki (StringType)
DataLayer.Wiki.notes (StringType)
DataLayer.Wiki.user (User class instance)

Methods :

Exceptions :


DataLayer.User class
~~~~~~~~~~~~~~~~~~~~
Data :
DataLayer.User.username (StringType) = login name
DataLayer.User.user_id (IntType) = unique user_id
DataLayer.User.firstname (StringType)
DataLayer.User.middlename (StringType)
DataLayer.User.surname (StringType)
DataLayer.User.name (StringType) = formatted complete name
DataLayer.User.email (StringType)
DataLayer.User.is_admin (Boolean)

Methods :

Exceptions :
UserNotFoundException

* 


