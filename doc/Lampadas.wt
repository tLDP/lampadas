<articleinfo>
  <title>Lampadas Developer's Guide</title>
  <author>
    <firstname>David</firstname>
    <othername>C.</othername>
    <surname>Merrill</surname>
  </author>
  <authorinitials>dcm</authorinitials>
  
  <revhistory>
    <revision>
      <revnumber>0.1</revnumber>
      <date>2002-04-25</date>
      <authorinitials>dcm</authorinitials>
      <revremark>Initial release.</revremark>
    </revision>
  </revhistory>
  
  <abstract>
    <para>
      This document explains the Lampadas System architecture, design philosophy,
      and other information for Lampadas developers.
    </para>
  </abstract>
</articleinfo>


=Introduction|intro=

This Programmer's Guide describes and defines the design and architecture of the
Lampadas Document Management System.
It gives all the background information you need to begin contributing
to the system.
This is not user documentation.
It is intended for developers, but will be of interest to those who administer
a Lampadas System as well.

This document is a work in progress, and reflects not only what is
currently implemented but what is planned for the future. Please study and
understand this document if you want to contribute to Lampadas.
If you have any questions that are not answered here, bring them up on the
Lampadas mailing list. Subscribe by writing [[mailto:lampadas-subscribe@en.tldp.org]].


==About Lampadas|about-lampadas==

Lampadas is a documentation publishing system with the following features:

*It provides an integrated working environment for geographically
distributed teams to write, manage and publish a large collection of documentation.

*It integrates with CVS.
Authors can write their documentation through Lampadas or
continue to use CVS as normal with no risk of collisions.

*Its web interface is a website platform upon which a documentation project
can build an interactive public website.

*It allows for configurable role-based assignation of permissions.

*It is fully localized into several languages.

*It supports many source file formats including
Texinfo, plain text, html, LinuxDoc SGML and DocBook SGML and XML,
as well as my WikiText format.

*It provides mirroring of documents published by others,
including documents from other Lampadas databases.

*It converts those source files into a DocBook XML document repository.

*It publishes that document repository through XSLT using xsltproc,
thank you [[www.dv.org|Daniel Veillard]] and [[http://www.redhat.com|Red Hat]],
Daniel's employer.

*It produces output in text, html multipart or single page, xml, sgml,
RTF, PDF and Plucker. It also provides a .tar.gz of each of these.

*It produces OMF meta-data for all documents, even those whose source format
lacks meta-data support.

*The OMF data provider supports extensions made to OMF by
the ScrollKeeper team, so documents in a Lampadas database can
be published through ScrollKeeper.
This means that Lampadas documents can be made available on desktop
machines in the user's help browser.

*It understands licensing.
Free documents in a Lampadas database can be published through ScrollKeeper.
Non-Free documents are not mirrored or exported to ScrollKeeper.

*It exports a static version of itself, again using XSLT and xsltproc,
which can be included
in a distribution's user documentation as the LDP is, for offline access
through a desktop help browser.

/*


==Who is Lampadas For?|who-for==

Lampadas is an infrastructure system for development projects,
documentation projects, companies and other groups who produce
documentation to manage their work.

Its primary user interface philosophy is that the best documentation
is produced when programmers, documentors, editors and readers can all
work together. It helps everyone who works with the documentation individually,
such as publishers, editors, authors and readers, but it also facilitates
communication between all of these people.

*It helps publishers by providing easy automated publishing that requires
minimal manual effort.

*It helps site administrators by providing online site management tools,
including the ability to publish a complete project web site right inside
Lampadas.

*It helps editors and reviewers with document management and workflow tools.

*It helps authors by providing quick and easy online editing,
error checking and an immediate "preview" of a document.
The WikiText documentation format, written for Lampadas, is arguably
the simplest format and the easiest to learn.
But Lampadas supports many different source formats, and the author
is free to choose among them.

*It helps translators by providing translation tools and by tracking
document updates and helping them keep translations in synch.

*It helps readers by providing powerful, flexible and configurable
access to all documentation in the collection.
Lampadas is a gateway into vast amounts of information.
And it supports internationalization and localization, so readers can
use Lampadas in the language of their choice.

/*


=Architecture=

The entire Lampadas system is built upon an underlying RDBMS,
currently PostgreSQL. The database provides persistence to the objects,
and allows for rapid, complex querying of very large databases.
The database is scripted in Structured Query Language,
or <acronym>SQL</acronym>.

On top of the database is an access layer implemented in Python.
The core consists of two modules which provide object hierarchies for
all other modules to use, thereby encapsulating SQL code and table
structures. One module holds documentation, and the
other holds web site content.

Lampadas code is highly modularized, with code separated into clearly defined
Python modules. The modular construction facilitates multiple maintainers,
maintains reliability, and provides a great deal of flexibility.

The web front end, document mirroring and conversion, the built-in
error checking system, Lintadas, and other subsystems are implemented in
separate modules.

When implementing any feature, consider carefully in which existing module it
belongs, or does it require a new module?

Unit tests are maintained. Never submit code that fails unit test.
If your code failed without breaking a unit test, write a unit test
to prevent the fault from re-entering cvs.


==RDBMS Database System==

The database code in Lampadas can be separated into two sections.
The first is scripts and data used at install time, and the second
is the code that is executed at runtime.

At runtime, all database access is through the DataLayer and WebLayer
Python modules, so all knowledge of table structures is encapsulated.

At install time, as well as for the administrator's or developer's
use at any time,
there is a utility called <command>lampadasdb</command>.
It is a shell script that lets you create, index, save and load,
and otherwise manage your Lampadas database at a very low level.
Of course you can use the standard PostgreSQL tool, psql, to
do whatever you wish with your database.

The lampadasdb script also loads data tables with default data,
the initial set of data that will be in a new Lampadas database.
Lampadas uses m4 macros and a structured directory tree to
ease the work of translators localizing Lampadas. These macros are
in /database and its subdirectories in our CVS tree.


==Database Wrappers==


==Dynamic Website==


==Document Processing==

Lampadas performs many types of conversions and other processing
on the documents in its repository. Conversions are always done
by calling an external utility. Where existing tools do not exist,
we create a new standalone utility so it can be used outside of
Lampadas.

The first step in processing a document is to mirror it into the
processing cache. This is wasteful of resources, particularly disk
space, but is necessary to avoid processing within the CVS tree.
Documents can be mirrored from the CVS tree or from external sources
via http or ftp.
Each document's source file is placed in its own directory.

After mirroring, a Makefile is written in each document's directory
that defines how the document is to be processed. This makes it easy
to run `make` to process a file. Makefile.py also writes a global
makefile in the root of the document cache, which calls all document
Makefiles recursively.
This makes it easy to process all changed files by running a simple
`make` command.

The processing creates all possible output formats for each document,
and records their availability in the database, so they can be
downloaded through the web API. It also creates the archive files using
tar and gzip.

Processing then generates a static set of web pages that can be served
through Apache to form a static version of the Lampadas data.
Because it is static, the pages lack the interactive features of the
Lampadas website.
This static site is suitable for mirroring or for distribution on CD
or within a Linux distribution, but does not stand
alone because it includes URLs that refer back to the Lampadas site
that generated them for interactive features.


===Mirroring===


If a file's source document is a URL, Lampadas downloads the document into
its local cache, extracts the contents if necessary, and merges the downloaded
document into its document store. Only documents which are distributed
under Free licenses can be mirrored.

Documents can be mirrored on a set schedule or manually.

Authors can add their remotely published documentation to Lampadas,
and have it included in the collection.

There is also a special mirroring system, AutoMirror, which handles
mirrors that require special handling. Right now, the source I'm
interested in is WikiWikiWebs. Mirroring a Wiki article means downloading a
binary file, parsing out the actual text of the page, then saving that
as a WikiText file into the document cache.

The Makefile module writes out a Makefile for each document, in the same
directory in the cache to which it was mirrored. The Makefile tells the
publication system how to build the outputs for that document.


===Document Conversion===

All source documentation formats are converted into DocBook XML, and
outputs are generated from the XML. Lampadas relies on external utilities
to perform actual conversion. It uses texi2db and wt2db, two of my other
projects, as well as docbook-to-man, xsltproc and others.


==Publishing==


==Module List==

This section lists the modules that comprise the system and gives short
descriptions. More detailed information about each module will follow.


===Globals===

The Globals module contains miscellaneous utility and convenience routines.


===BaseClasses===

The BaseClasses module contains classes that are never instantiated, but only used
as base classes upon which other Lampadas objects are built.


===Config===

This module parses the configuration file and provides those settings to the rest
of the system.


===Log===

This module writes to the Lampadas log file.


===Database===

This module accesses the back-end RDBMS system, currently only PostgreSQL.


===URLParse===

This module splits a URL into its constituent parts.


Lampadas lets you specify a language by adding /EN/, for example, to the
beginning of the URL. This is called a language specifier.
URLParse has a special purpose addition to the standard Python url parser,
which is that it recognizes a URL that contains a language specifier.
When Lampadas
receives a request for a URL prefaced with a language specifier,
it returns the page in the requested language.
The remainder of the URL is processed just as if the specifier were not
present.


===DataLayer===

This module provides an object hierarchy to access base Lampadas data stored in the
database. This is the core module upon which most functionality is built.


===WebLayer===

This module provides an object hierarchy to access web page content.
This is the core module upon which a Lampadas website is built.

Provides an object hierarchy into all web content other than documentation.
This is implemented separately from the DataLayer so that plugin modules need
not include the web functionality, keeping them lighter in memory footprint.


===HTML===

The HTML module generates HTML primitives, such as comboboxes, that are used to
make up the web pages.

HTML generation methods require the caller to specify the
desired language as a two-character ISO code.

It also generates complete web pages for serving over HTTP to web browsers.
The content of the pages themselves is held in the database, to support online editing of
page content by system administrators, and also to support internationalization.

There is a templating system for the web pages and their text strings, which is
explained in the I18n section.


===WebServer===

The WebServer module provides a web server for testing the system.

The WebServer module is a test webserver for use by developers, to test a
local system.
A mod_perl website
is planned, but WebServer provides an alternate way to run the system. It is intended
for the use of developers, not as a production server.


===Lintadas===

Lintadas is a error-checking module that identifies many kinds of problems in the
database and in document source files.


===Mirror===

The Mirror module copies all documents into a tree in a cache directory.
It knows how to download documents which reside in external repositories,
like the GNU manuals, and store them in the local filesystem.
It downloads files from external repositories by http or ftp,
and stores them locally.

If a remote document is downloaded, any local files listed for that document
are deleted, and replaced by the contents of the download.
If a .tar, .gz or .tar.gz archive is downloaded, the archive is extracted
and the extracted file list recorded in the database (document_file).

Mirror does not do any additional document preprocessing;
it only copies and stores the documents.
If more sophisticated types of preprocessing are required,
such as a Wiki article which must be parsed out of a binary data file,
then the AutoMirror module handles it.


===AutoMirror===

AutoMirror performs special handling for documents in external repositories
that require it.

Lampadas automatically mirrors documents in external repositories
that require special processing. Currently the format supported is
a WikiWikiWeb, with Wikipedia being the pilot source.

===Makefile===

Once all source files are downloaded or copied into the cache by the Mirror
module, the Makefile module writes a Makefile for each document,
to be used when converting and publishing it.

This module writes out a Makefile in the document cache for each document.
The Makefile tells the publication system how to build the various
outputs for the document.


==Module Dependencies|module-depends==

<programlisting>
WebServer-----HTML----------WebLayer------+
                                          |
              Makefile------+             |
                            |             |
              AutoMirror----+             |
                            |             |
              Mirror--------+             |
                            |             |
              Lintadas------DataLayer-----Database
</programlisting>

The Globals, BaseClasses, URLParse, Log and Config modules can be freely
referenced and used by any other module,
so to keep things simple they have been omitted from this diagram.
The other modules, however, have distinct relationships that must be
understood and followed.

This diagram shows the relationships between the core modules that make up Lampadas.
As the diagram indicates, the DataLayer is the key module. It provides access to 
the underlying database through an object hierarchy. Additional modules are built
on top of the DataLayer which implement specific functionality. Each of these can
be consider an "extension" of the system, and any number of them could be constructed.

The highly modular structure of the system was carefully designed to isolate
functionality. This makes the system much more easily extensible and much more
flexible. When modifying code, and especially when adding features, think carefully
about where the feature should be implemented.

















=Internationalization|i18n=

Internationalization, or i18n for short, means support for multiple languages.
Lampadas fully supports i18n in website content by storing strings in the database
in Unicode.
Most data tables have a matching i18n table, e.g. format and format_i18n.
The i18n table contains all fields which require translation, typically
names and descriptions.
Each row in those tables has a <literal>lang</literal> field which gives the
ISO code for the language.

Lampadas also supports i18n in the documentation itself.
Documents can be made available in numerous translations along with other contents.


=Localization|l10n=

Localization, or l10n for short, is the process of adding the translations for a particular
language and then providing the correct translation to a user.
The only part of the system that requires localization is the website, because that is
the only data that is directly presented to a user.

To determine which language to serve to a user, the website reads their browser preferences.
Their default language can be overridden if the user is registered and selects a language
for the website in their preferences.

Alternatively, the user can request a specific
translation by prefixing the standard Lampadas URL with [[/ISO]], where ISO is the
two-character ISO code of the desired language. If the desired language is not available,
the system will attempt to serve the page in English.

There are two sets of data in lampadas that can be localized: the documents,
and the website content. Website content includes both the default website content
that ships with Lampadas, and the web pages which administrators
add to their Lampadas website.

Lampadas ships with a set of "supported" languages, into which all default data has
been translated. If a site administrator does not wish to support a language, they can
disable that translation on their site.


==Document Localization|doc-l10n==

The Lampadas system, by default, will display to a reader only documents which are
available in their language, as determined by browser or preference setting.
A user may request that an arbitrary set of languages be displayed to them if,
for example, they are multilingual. Then documents in all of those languages will
be presented.


==Website Content Localization|site-l18n==

Default web content is always translated into all supported languages. A supported language
is any language into which Lampadas has been translated. In other words, we never ship a
partial translation, only a complete translation, for any language we support.

The default content is required for Lampadas operation. Therefore it must continue to
be available in all supported languages, but the content of those pages can be modified.

While site administrators can choose to keep the various translations in sync and thereby
maintain this state of affairs, we expect that some projects will not be able to do
this. So, it is possible that not only will the English content of a site vary from the
Spanish content in that the translations are not synced, it is also possible that each
language will have its own maintainer with completely independent content. Therefore,
the localization code must make no assumptions about the availability of a page in
each translation.

The DataLayer module does not perform any localization, but returns in its data sets all possible
translations and strings. Objects which have multiple translated strings will have a
child object called I18n, which is a dictionary object. That dictionary contains an object
for each translation that is available. Each of those objects has a property for each
string the parent object needs. For example, for Class object has the following structure:

<literallayout>
Class['HOWTO'].I18n['EN'].Name = 'HOWTO'
Class['HOWTO'].I18n['EN'].Description = 'HOWTO do something in Linux'
</literallayout>

I18n for the website is handled through localizing text "blocks", web "pages", and text "strings".
These are accessed through the WebLayer module. Like DataLayer, it does not do the actual language
selection. That is performed by the HTML module which is built upon it.


=Generating Web Pages|page-generation=

This section explains how Lampadas generates the web pages which are served
to client browsers.

The web pages are i18n-aware and localized in several languages. For this and
other reasons, Lampadas generates many pages dynamically.
It also serves static pages, stylesheets and images.

If a file exists on the filesystem that matches the http request,
the file will be served.
If no file exists, the page is built dynamically.
Any disk file takes priority over any dynamic page, allowing administrators
to override dynamic pages with static content if they wish.

The dynamic page generation engine builds complete pages out of html snippets.
The snippets come in six forms: Templates, Pages, Boxes, Tables, Blocks and Strings.
Let's start with a quick run through them.

A template is an outline of how to structure a page, and a page is the content
of the main area on the html page. Boxes and tables are both constructed using html tables,
and differ primarily in their appearance and intended use.
Boxes are used for menus and other items that appear in the navigational area of pages,
and tables hold data from the database, such as a list of documents,
annd appear in the body of the page.
Blocks are arbitrary blocks of html, and strings are arbitrary text strings.

Templates, Pages, Blocks and Strings are extracted from data tables, and can be
modified by the site administrator. Boxes and tables are generated by code, and
usually cannot be modified. In some cases the code will load a block or string
while building; in those
cases they can be modified by modifying the blocks and strings upon which
they are built.

Pages and strings can be localized. Templates and blocks contain only HTML and do
not require localization.
Disk files are not yet localizable.
Graphic images and css stylesheets do not require localization.


==Building Dynamic Pages|building-pages==

When a page is requested, the system first looks to see whether there is a file on disk
that matches the requested page. It looks in the directory specified in the configuration
variable, 'filedir'. This variable is available as the Config.FileDir property.
If a file is found, whether it is an image, a css stylesheet, or a
static web page, the file is sent to the client with the correct headers based on the
file type and file length.

If there is no static file to send, the system knows it must build the page dynamically,
so it looks for a page of the right name. All of the information used to build the page
starts with the page record.

When building a dynamic page, 
a template defines the layout of the page, which is then built by assembling the specified
boxes, tables, blocks and strings to make the page content. The entire process is a fairly
complex one, so we'll walk through it step by step, and work an example as we go.


==Templating|templating==

When a page is requested, the system first determines what template that page is assigned
to, and loads it. Each page has one and only one template. The page contents really are only
the "body" part of the page, with no header, footer, or navigation controls. The template
fills in the surrounding parts of the result page.
The page and template work together,
but they are stored separately so that the template, which specifies page layout, can
be reused easily, giving a consistent structure to the entire site.

You might think of it as the page being "embedded" into the template.
That concept will help you along as we dig deeper into the system, because "embedding"
of one bit of text inside another is the nature of how a page is built.
This will make more sense as you learn the way the templating system works.

Because each page can be assigned its own template,
each page can have its own customized navigation and header/footer if desired.
Normally, this is not necessary. However, in some cases you might want to have a page with
no navigation panel on the left, because the document is very wide and you need all of the
real estate. While Lampadas makes this easy through its templating system, it is
recommended that you maintain consistency in page layout by adding modified templates
only where necessary.

The default Lampadas installation comes with two templates: "default", and "index".
The "index" template is used for the home page, where we have extra navigation panels
that are not used throughout.

But to understand a template, we need to look at one.
So let's look at an actual Lampadas template:

<programlisting>
<html>
  <head>
    <title>|title|</title>
    <base href="|base|">
    <link rel="stylesheet" href="css/|stylesheet|.css" type="text/css">
  </head>
  <body>
    <table class="layout" style="width:100%">
      <tr><td colspan="2">
      |header|
      </td></tr>
      <tr>
        <td width="200" valign="top">|boxmainmenu|</td>
        <td valign="top">
        |body|
        </td>
      </tr>
      <tr><td colspan="2">
      |footer|
      </td></tr>
    </table>
  </body>
</html>
</programlisting>

Here, you see that a template is the basic outline of a web page.


==Tokens==

You might have noticed in the example that there are big pieces of it
that are missing, and instead the template has
strings that are delimited by the pipe character, "|".
These strings are called tokens. Each token is the name of some other object,
whose contents are to be inserted in place of the token.

You can see in the sample template that there is a token called "body", or "|body|".
Every template must have a "body" token. It tells Lampadas where to insert the
contents of the page. So, as noted above, the page really is "embedded" inside
the template.

There are several kinds of tokens:

*Meta-data tokens
*Box tokens
*Table tokens
*Block tokens
*String tokens

/*


===Meta-data Tokens===

Meta-data tokens represent some piece of meta-data about the page being built,
or perhaps some configuration value. In the example, the tokens "title", "base"
and "stylesheet" are meta-data tokens.
The "title" token is replaced by the title of the page,
appropriately localized. The "base" token is replaced by the website's base
URL. The "stylesheet" token is replaced by the user's preferred css stylesheet.

The meta-data tokens are written right into the Lampadas code.

A list of meta-data tokens is at the end of this section.


===Box and Table Tokens===

A box or table token is replaced by the output of a
built-in Lampadas routine.
The routine produces html which forms a table. A "Box" table
is a small menu-type table intended for the side panel,
and a "Table" table is a larger table intended for the body of
a page. The difference is in the expected size and format.

A list of box and table tokens appears at the end of this section.


===Block Tokens===

In the example template above, the "header" and "footer" tokens are both block tokens.
Lampadas will search for a block named "header", and then replace the "header"
token with the contents of that block. Now let's look at the contents of the
"header" token:

<programlisting>
<table class="header" style="width:100%">
<tr><th>|project| Lampadas System</th></tr>
</table>

<table class="title">
<tr><td><h1>|title|</h1></td></tr>
</table>
</programlisting>

Again, This block just contains more HTML, and also some more tokens.
In the header, we have the tokens: "project" and "title", again.
The "title" token here is the same token we saw in the template,
so in this example the page title, properly localized,
appears both in the title bar of
your browser and in a table at the top of the page.


===String Tokens===

Unlike the other tokens, string tokens are the names of text strings.
They are used only for localization of text phrases and words.
Lampadas just looks up the right localization of the string, and
inserts it in place of the token.


==Editing Pages==

Pages, can be freely edited in the Lampadas database by editing the
appropriate page, block, and string contents..
They are the parts of a dynamically built page that are easily editable
by the Lampadas administrator because they are held in the database,
and can be edited through the Lampadas administrator interface.
This ability to define your own pages, blocks,
and strings lets you build your Lampadas website the way you want it.

Page and string contents can be localized when displayed on the
web site or other output.
Each has a language code and the actual localized text itself.

In the example, the "project" token is a string token.
The engine would simply replace it with the value specified in the string table,
properly localized.

The "project" string token is a default token, that is, it comes
preinstalled in a new Lampadas installation, although during system configuration,
you should set it to hold the name of your project. However, the Lampadas
administrator can add any tokens she needs, and refer to them in her
templates, pages, blocks, and even other strings.

Here is what the page would look like after the tokens have been replaced
with their textual values, including the "header" token:

<programlisting>
<html>
  <head>
    <title>About Lampadas</title>
    <base href="/>
    <link rel="stylesheet" href="css/default.css" type="text/css">
  </head>
  <body>
    <table class="layout" style="width:100%">
      <tr><td colspan="2">
<table class="header" style="width:100%">
<tr><th>Linux Documentation Project Lampadas System</th></tr>
</table>

<table class="title">
<tr><td><h1>About Lampadas</h1></td></tr>
</table>
      </td></tr>
      <tr>
        <td width="200" valign="top">
<table class="box">
<tr><th>Main Menu</th></tr>
<tr><td>
<a href="home">Home</a><br>
...
<a href="help">Help</a><br>
</td></tr>
</table>
    </td>
        <td valign="top">
This is Lampadas, the LDP document management system.
...
        </td>
      </tr>
      <tr><td colspan="2">|footer|</td></tr>
    </table>
  </body>
</html>
</programlisting>

The new, embedded portions are left aligned where possible, to make it easier
for you to see them. But we still have not embedded the "footer" token, so let's
take a look at it now:

<programlisting>
<table class="footer" style="width:100%">;
<tr><td>
<center>
<a href="copyright">Copyright</a> \|
<a href="privacy">Privacy</a> \|
<a href="lampadas">About Lampadas</a>
<p>
<a href="/EN/|page|">English</a> \|
<a href="/FR/|page|">French</a>
</center>
</td></tr>
</table>
</programlisting>


==Escaping Pipe Characters==

You might have been wondering how one would enter a pipe character inside
a page, since the pipe character is used as a delimiter. In this footer,
we can see the answer. Pipe characters that are not delimiters must be
"escaped" by using a backslash character. So, "\|" is a real pipe character,
and will not be considered a delimiter.

Moving on to the rest of the "footer",  we see that we have more HTML
and more tokens.
In this footer, we have two links that
take you to translations in French and English. See the
[[i18n|Internationalization]] section for an explanation of the
<literal>/EN/</literal> and <literal>/FR/</literal> prefixes.


==A Completed Page==

And we see a new meta-data token, the "page" token. It is replaced by
the name of the current page.

After embedding the footer, and then embedding the values for its tokens,
the page is complete. Here is how the example page would look when all tokens
have been processed:

<programlisting>
<html>
  <head>
    <title>About Lampadas</title>
    <base href="/>
    <link rel="stylesheet" href="css/default.css" type="text/css">
  </head>
  <body>
    <table class="layout" style="width:100%">
      <tr><td colspan="2">
<table class="header" style="width:100%">
<tr><th>Linux Documentation Project Lampadas System</th></tr>
</table>

<table class="title">
<tr><td><h1>About Lampadas</h1></td></tr>
</table>
      </td></tr>
      <tr>
        <td width="200" valign="top">
<table class="box">
<tr><th>Main Menu</th></tr>
<tr><td>
<a href="home">Home</a><br>
...
<a href="help">Help</a><br>
</td></tr>
</table>
    </td>
        <td valign="top">
This is Lampadas, the LDP document management system.
...
        </td>
      </tr>
      <tr><td colspan="2">
<table class="footer" style="width:100%">
<tr><td>
<center>
<a href="copyright">Copyright</a> |
<a href="privacy">Privacy</a> |
<a href="lampadas">About Lampadas</a>
<p>
<a href="/EN/about">English</a> |
<a href="/FR/about">French</a>
</center>
</td></tr>
</table>
      </td></tr>
    </table>
  </body>
</html>
</programlisting>

Now that we've been through the entire set of elements from which a page is
built, and walked through the process step by step, 
you should understand conceptually the way a page is pieced together.
Logically speaking, the template is the top of the embedding system.
The page is embedded into the template, and boxes, tables, blocks and
strings are embedded into the page.
Blocks and strings can be nested inside
each other, as well. So, theoretically, you could have a block that
contains a string token, that contains a block token, that contains
another block token, etc., as deeply as you need to go. For obvious
reasons, however, tokens cannot be nested circularly, or an error
will result.

There is one additional wrinkle that has not yet been addressed.
Code token replacement text often contains block or string tokens.
For example, the contents of the Main Menu are variable based on the
current user's permissions, so it has to be generated by code, but the
text strings it contains still have to be localized. To perform the localization,
the Main Menu token ("boxmainmenu") embeds a series of strings.
Then, the text that is actually presented to each user can be localized
to their preferred language.


==Lists of Tokens|token-list==


===Code and Meta-data Tokens|codetokens===

The following Code and meta-data tokens are available in the initial
Lampadas install:

*title: 
The page title.

*body: 
The body of the page, always included in a template, but never elsewhere.

*hostname: 
The server's hostname, as defined in the configuration file.

*rootdir:
The root directory of Lampadas on your web server, from the configuration file.

*port:
The port on which Lampadas is being served, from the configuration file.

*base:
The base URL of the Lampadas section of your website. This is built from the
hostname, the port, and the rootdir, all of which come from the configuration file.

*page:
The name of the page. This is its mnemonic name, not its title.

*stylesheet:
The user's preferred stylesheet, or the default.

*boxmainmenu:
The Main Menu navigation box.

*tabdocstable:
The list of documents in a browsable, sortable table.

*tabeditdoc:
The form in which one edits document meta-data.


===Block and String Tokens|blocktokens==

The following block and string tokens are available in the initial Lampadas install.
You can, of course, add to or modify them. In fact, some of them should be modified
during installation.

*header: 
The default page header.

*footer: 
The default page footer.

*project: 
The name of your project, e.g., "The Linux Documentation Project".

*projectshort: 
The short name of your project, e.g., "The LDP".

*mmtitle: 
The title of the Main Menu.

*home: 
The word "home", localized. Used in the Main Menu.

*doctable: 
The words "Doc Table", localized. Used in the Main Menu.

*docdetails: 
The words "Document Details", localized. Used in the document meta-data edit form.


=CSS Stylesheets=

The appearance of a Lampadas page is configured in a Cascading Stylesheet. A set
of default stylesheets is included in the default Lampadas install, and a site
administrator can add to or modify them.

CSS can modify the appearance of base HTML elements, such as table cells and so on,
and the following classes are also provided:

<programlisting>
TABLE.layout		lays out the main areas of the page
TABLE.navbox		a navigation box on the side of the page
TABLE.box		a box on the side of the page
TABLE.header		a table which holds the header
TABLE.footer		a table which holds the footer
TABLE.title		a table which holds the page title
TD.baron		a bar graph cell, when lit
TD.baroff		a bar graph cell, when unlit
</programlisting>


=Website API|api=

This is the API through which Lampadas can be accessed via http.
It is the API for the website, but it could also be built upon
by other programs. For example, documents can be downloaded in any
available format through this API, as can OMF data.

Note that the standard API does not require any filename extensions
such as .html or .jpeg. If an extension is included, Lampadas will
assume you want a static file for download, and fail if one is not
found.

You will notice that nearly all URLs terminate with a directory
name rather than a filename. Trailing slashes are optional for
all of these directories.

For convenience when downloading, the caller may append either
".html" or ".htm" to the "directory" name, explicitly referencing
it as a file. If no filename extension is given, Lampadas assumes
you wanted one of the following directories, and adds "/" to the
end of your URL if needed.

The URL-based language selection that was discussed under l18n applies to
all of these URLs. A specific language can be selected by prefacing the URL
with the two character ISO code.

This section does not discuss site content, only the content which
forms the base of Lampadas and is included in the default Lampadas install.

<programlisting>
/                           home page
    home/                   home page
    index/                  home page
    myhome/                 personal home page for a user
    help/                   help using Lampadas
    about/                  about page for the website
    lampadas/               about page for Lampadas
    copyright/              site copyright page
    privacy/                site privacy policy
    contribute/             ways to contribute to this Lampadas site
    downloads/              project files for download
    sitemap/                site map
    stats/                  statistics page
    doc/                    list of documents (the DocTable)
        A/                  titles beginning with A, etc.
        1/                  document with ID #1
        RPM-HOWTO/          document by "short name", equivalent to 1/
            text/           document in text format
                tar/        in tar archive
                gz/         in gzip archive
                tar.gz/     in .tar.gz archive (applies to all formats)
            xml/            document in DocBook XML
            linuxdoc/       document in LinuxDoc SGML
            sgml/           document in DocBook SGML
            pdf/            document in PDF
            plucker/        document in Plucker format
            html/           document in a single HTML page
            rtf/            document in Rich Text Format
            omf/            OMF data in XML
    block/                  list of blocks
        foo/                block with code foo
    class/                  list of classes
        1/                  class with id #1
    dtd/                    list of dtds
        foo/                dtd with code foo
    error/                  list of errors
        1/                  error with id #1
    format/                 list of formats
        1/                  format with ID #1
    language/               list of languages
        foo/                language with ISO code foo
    license/                list of licenses
        foo/                license with code foo
    page/                   list of pages
        foo/                page with code foo
    pubstatus/              list of pubstatuses
        foo/                pubstatus with code foo
    reviewstatus/           list of reviewstatuss
        foo/                reviewstatus with code foo
    role/                   list of roles
        foo/                role with code foo
    section/                list of sections
        foo/                section with code foo
    string/                 list of strings
        foo/                string with code foo
    template/               list of templates
        1/                  template with ID #1
    topic/                  list of topics
        1/                  topic with ID #1
    user/                   list of users
        A/                  names beginning with A, etc.
        1/                  user with ID #1
</programlisting>


==Querying==


===IBM Content Query System Plugin|cqs===

IBM is planning a plugin for Lampadas to support their Content Query System
technology.

CQS uses a simple URL based query system to query databases worldwide,
combining the results into a single report. One example is to search
various Linux distributors' bug databases simultaneously for a certain bug,
another is searching across Lampadas databases for documents on a certain
topic. See their website for more details on CQS.

What this means for Lampadas is that finalizing the query API is of high
importance. Here is a tentative, not yet implemented Querying API:


===Querying Documents===

doc/
    find/			web form for doing document searches
    find?			submit a query, using HTTP GET
        docid=1
        classid=1
        formatid=1
        topicid=1
        authorid=1
        title=foo
        abstract=foo
        text=foo


===Querying Users===

user/
    find/               web form for doing user searches
    find?               submit a query, using HTTP GET
        id=1
        firstname=foo
        middlename=foo
        surname=foo
        email=foo
        docid=1


=Error Handling=

This section discusses how errors are handled when processing documents.

Each error has a severity level assigned to it. Logging of errors is
configurable by severity, as explained in [[logging]].


=Logging=


=Coding Conventions|codingstyle=

The code generally follows Python coding style.

*Constants are in all uppercase.

*Class names are in TitleCase.

*Attributes, properties and methods are in lower_case, with underscore separators.

*Private variables are in lowercase.

*Indentation is done using four spaces, not tabs.

*Each class, method and property should have a docstring that describes its purpose.
The docstrings are used to generate library documentation, so this is very important.
Constructors, destructors, and other self-identifying routines do not necessarily need
a docstring, unless their operation is somehow different from what one would expect.

/*

Here is an example. You can, of course, find many more right in the code.

<programlisting>
WILL_NOT_CHANGE = "(c) Copyright 3l33t h4x0r"

class ClassName:
    """This class does something"""
    
    color = None

    def __init__(self) :
        self.other_color = None

    def my_method(self) :
        """do something"""
</programlisting>

