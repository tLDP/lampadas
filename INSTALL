=======================================
Installation
=======================================

2002-08-03

Installation of lampadas is a bloody mess.
Report all problems, suggestions and flames to

alexander.bartolich@gmx.at

Tested with Red Hat 7.3, Debian 3.0r0 and SuSE 7.3. 

Directory 'doc' holds some related plain text files.
'doc/INSTALL.ancient' are the original notes from David Merill.
'doc/INSTALL.mandrake' is the diary of a successful installation
'doc/INSTALL.redhat' are special steps required on Red Hat 7.x
on Mandrake 8.2. (FIXME: by whom?)

A summary of the process:

0. Copy/extract lampadas files
1. Install a lot of tools, modules, packages
2. Build documentation in directory 'doc'
3. Install postgresql database
4. Install Apache with mod_python and python 2.x

=======================================
0. Copy/extract lampadas files
=======================================

Reading this file means you somehow accomplished this step. 
Note that lampadas does not require compilation and copying of
resulting files to some destination directory. Move the whole
directory to the final location, e.g. /opt/lampadas.
This directory can be operated read-only after configuration.

=======================================
1. Install a lot of tools, modules, packages
=======================================

The prefered way to verify this step is with a bash script you'll
find in this directory:

   ./configure

The script is very dump. It tries to identify your distribution
and then checks whether files exist in the usual places.

I don't like third-party RPMs and unstable DEBs. My philosophy
is to use as much standard packages as possible, and compile
everything else manually. In this case:

wt2db-0.5
pypgsql-2.1
mod_python-2.7.8 (only Red Hat)

Please contact me if your distribution is unusual or you prefer
to compile all things from scratch. And please read all of this
document before you install missing things.

If all tests are passed ./configure will patch a few text files
with correct path names. This is not fool proof. Please check at
least the files 'bin/setenv.sh' and 'conf/lampadas.conf'.

=======================================
2. Build documentation in directory 'doc'
=======================================

This step is very optional. First of all it's just documenation,
nothing vital. And then the installation kit (lampadas-*.tar.gz)
already contains all rendered HTML.

It's a nice way to test some tools from step #1, though.
And developers accessing CVS should really give it a try.

   cd doc
   make clean
   make

=======================================
3. Install postgresql database
=======================================

All major distributions provide pre-fabricated packages of postgresql.
You still need to create user accounts and configure authentication,
though. Local accounts are the easiest case since that requires no
passwords or network control.

Usually there is only one priviledged account (called 'postgres')
with access to the postmaster. You will need two other accounts.
One for database management, one for the webserver. See for
'bin/setenv.sh' for the value of LAMPADAS_WWW_USER. It should have
been set by ./configure.

To grant another account access, do the following (as root, since
user postgres has no password set):

   su - postgres -c 'createuser -A -d alba'

'alba' is my account name on my machines, chose something approriate.
You won't need root access again for the database.
Log in with the new account ('alba' in above example) and create a
database instance called 'lampadas':

   createdb -E UNICODE lampadas

Test the result:

   psql lampadas

To create tables and insert default values use 'bin/lampadasdb'.
This tool requires some environment variables defined by 'bin/setenv.sh'.
Please read the comments in that file.

   . bin/setenv.sh
   bin/lampadasdb create
   bin/lampadasdb insert

=======================================
4. Install Apache with mod_python and python 2.x
=======================================

This is a problem on Red Hat 7.x, where '/usr/bin/python' is a
Python 1.x. Read 'doc/INSTALL.redhat' how to roll your own.

On the other hand Red Hat has no problems with compilation of
pypgsql-2.1. My experience on both Debian 3.0r0 and SuSE 7.3
is that 'python setup.py build' breaks because of missing header
files. Just add the result of

   pg_config --includedir

to variable C_INCLUDE_PATH. In the simpliest case this means

   export C_INCLUDE_PATH=`pg_config --includedir`

On SuSE 7.3 another directory is required, i.e.

   export C_INCLUDE_PATH=/usr/include/pgsql:/usr/lib/apache/include/python2.1

I also found that you can safely ignore the message

   gcc: unrecognized option `-R/usr/local/pgsql/lib'

and just continue with 'python setup.py install'.
